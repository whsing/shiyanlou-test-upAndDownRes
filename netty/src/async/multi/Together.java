package async.multi;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.time.StopWatch;

public class Together {
	
	public static void main(String[] a) throws Exception{

		final StopWatch stopWatch = StopWatch.createStarted();

	    CompletableFuture<String> result = CompletableFuture.supplyAsync(() -> {
	        try {
	            // 这里模拟微服务A的查询接口
	            System.out.println("A======" + Thread.currentThread().getName());
	            TimeUnit.SECONDS.sleep(3);
	            stopWatch.split();
    			System.out.println("第一个查询耗时："+stopWatch.getSplitTime());
	        } catch (InterruptedException e1) {
	            e1.printStackTrace();
	        }
	        return "第一个查询结果";
	    }).thenCombineAsync(
	            CompletableFuture.supplyAsync(() -> {
	                try {
	                    // 这里模拟微服务B的查询接口
	                    System.out.println("completablefutureB======" + Thread.currentThread().getName());
	                    TimeUnit.SECONDS.sleep(1);
	                    stopWatch.split();
	        			System.out.println("第二个查询耗时："+stopWatch.getSplitTime());
	                } catch (InterruptedException e2) {
	                    e2.printStackTrace();
	                }
	                return "第二个查询结果";
	            })
	            , (r1, r2) -> {
	                // 合并两个查询结果
	                return r1 + " & "
	                		+ "14365,14357,14152,7619,7618,7617,7616,7615,7614,7613,7612,7611,7610,7609,7608,7607,7606,7605,7604,7603,7602,7601,7600,7599,7598,7597,7596,7595,7594,7593,7592,7591,7590,7589,7588,7587,7586,7585,7584,7583,7582,7581,7580,7579,7578,7577,7576,7575,7574,7573,7572,7571,7570,7569,7568,7567,7566,7565,7564,7563,7562,7561,7560,7559,7558,7557,7556,7555,7554,7553,7552,7551,7550,7549,7548,7547,7546,7545,7544,7543,7542,7541,7540,7539,7538,7537,7536,7535,7534,7533,7532,7531,7530,7529,7528,7527,7526,7525,7524,7523,7522,7521,7520,7519,7518,7517,7516,7515,7514,7513,7512,7511,7510,7509,7508,7507,7506,7505,7504,7503,7502,7501,7500,7499,7498,7497,7496,7495,7494,7493,7492,7491,7490,7489,7488,7487,7486,7485,7484,7483,7482,7481,7480,7479,7478,7477,7476,7475,7474,7473,7472,7471,7470,7469,7468,7467,7466,7465,7464,7463,7462,7461,7460,7459,7458,7457,7456,7455,7454,7453,7452,7451,7450,7449,7448,7447,7446,7445,7444,7443,7442,7441,7440,7439,7438,7437,7436,7435,7434,7433,7432,7431,7430,7429,7428,7427,7426,7425,7424,7423,7422,7421,7420,7419,7418,7417,7416,7415,7414,7413,7412,7411,7410,7409,7408,7407,7406,7405,7404,7403,7402,7401,7400,7399,7398,7397,7396,7395,7394,7393,7392,7391,7390,7389,7388,7387,7386,7385,7384,7383,7382,7381,7380,7379,7378,7377,7376,7375,7374,7373,7372,7371,7370,7369,7368,7367,7366,7365,7364,7363,7362,7361,7360,7359,7358,7357,7356,7355,7354,7353,7352,7351,7350,7349,7348,7347,7346,7345,7344,7343,7342,7341,7340,7339,7338,7337,7336,7335,7334,7333,7332,7331,7330,7329,7328,7327,7326,7325,7324,7323,7322,7321,7320,7319,7318,7317,7316,7315,7314,7313,7312,7311,7310,7309,7308,7307,7306,7305,7304,7303,7302,7301,7300,7299,7298,7297,7296,7295,7294,7293,7292,7291,7290,7289,7288,7287,7286,7285,7284,7283,7282,7281,7280,7279,7278,7277,7276,7275,7274,7273,7272,7271,7270,7269,7268,7267,7266,7265,7264,7263,7262,7261,7260,7259,7258,7257,7256,7255,7254,7253,7252,7251,7250,7249,7248,7247,7246,7245,7244,7243,7242,7241,7240,7239,7238,7237,7236,7235,7234,7233,7232,7231,7230,7229,7228,7227,7226,7225,7224,7223,7222,7221,7220,7219,7218,7217,7216,7215,7214,7213,7212,7211,7210,7209,7208,7207,7206,7205,7204,7203,7202,7201,7200,7199,7198,7197,7196,7195,7194,7193,7192,7191,7190,7189,7188,7187,7186,7185,7184,7183,7182,7181,7180,7179,7178,7177,7176,7175,7174,7173,7172,7171,7170,7169,7168,7167,7166,7165,7164,7163,7162,7161,7160,7159,7158,7157,7156,7155,7154,7153,7152,7151,7150,7149,7148,7147,7146,7145,7144,7143,7142,7141,7140,7139,7138,7137,7136,7135,7134,7133,7132,7131,7130,7129,7128,7127,7126,7125,7124,7123,7122,7121,7120,7119,7118,7117,7116,7115,7114,7113,7112,7111,7110,7109,7108,7107,7106,7105,7104,7103,7102,7101,7100,7099,7098,7097,7096,7095,7094,7093,7092,7091,7090,7089,7088,7087,7086,7085,7084,7083,7082,7081,7080,7079,7078,7077,7076,7075,7074,7073,7072,7071,7070,7069,7068,7067,7066,7065,7064,7063,7062,7061,7060,7059,7058,7057,7056,7055,7054,7053,7052,7050,7049,7048,7047,7046,7045,7044,7043,7042,7041,7040,7039,7038,7037,7036,7035,7034,7033,7032,7031,7030,7029,7028,7027,7026,7025,7024,7023,7022,7021,7020,7019,7018,7017,7016,7015,7014,7013,7012,7011,7010,7009,7008,7007,7006,7005,7004,7003,7002,7001,7000,6999,6997,6996,6995,6994,6993,6992,6991,6990,6989,6988,6987,6986,6985,6984,6983,6982,6981,6980,6979,6978,6977,6976,6975,6974,6973,6972,6971,6970,6969,6968,6967,6966,6965,6964,6963,6962,6961,6960,6959,6958,6957,6956,6955,6954,6953,6952,6951,6950,6949,6948,6947,6946,6945,6944,6943,6942,6941,6940,6939,6938,6937,6936,6935,6934,6933,6932,6931,6930,6929,6928,6927,6926,6925,6924,6923,6922,6921,6920,6919,6918,6917,6916,6915,6914,6913,6912,6911,6910,6909,6908,6907,6906,6905,6904,6903,6902,6901,6900,6899,6897,6896,6895,6894,6893,6892,6891,6890,6889,6888,6887,6886,6885,6884,6883,6882,6881,6880,6879,6878,6877,6876,6875,6874,6873,6872,6871,6870,6869,6868,6867,6866,6865,6864,6863,6862,6861,6860,6859,6858,6857,6856,6855,6854,6853,6852,6851,6850,6849,6848,6847,6846,6845,6844,6843,6842,6841,6840,6839,6838,6837,6836,6835,6834,6833,6832,6831,6830,6829,6828,6827,6826,6825,6824,6823,6822,6821,6820,6819,6818,6817,6816,6815,6814,6813,6812,6811,6810,6809,6808,6807,6806,6805,6804,6803,6802,6801,6800,6799,6798,6797,6796,6795,6794,6793,6792,6791,6790,6789,6788,6787,6786,6785,6784,6783,6782,6781,6780,6779,6778,6777,6776,6775,6774,6773,6772,6771,6770,6769,6768,6767,6766,6765,6764,6763,6762,6760,6759,6758,6757,6756,6755,6754,6753,6752,6751,6750,6749,6748,6747,6746,6745,6744,6743,6742,6741,6740,6739,6738,6737,6736,6735,6734,6733,6732,6731,6730,6729,6728,6727,6726,6725,6724,6723,6722,6721,6720,6719,6718,6717,6716,6715,6714,6713,6712,6711,6710,6709,6708,6707,6706,6705,6704,6703,6702,6701,6700,6699,6698,6697,6696,6695,6694,6693,6692,6691,6690,6689,6688,6687,6686,6685,6684,6683,6682,6681,6680,6679,6678,6677,6676,6675,6674,6673,6672,6671,6670,6669,6668,6667,6666,6665,6664,6663,6662,6661,6660,6659,6658,6657,6656,6655,6654,6653,6652,6651,6650,6649,6648,6647,6646,6645,6644,6643,6642,6641,6640,6639,6638,6637,6636,6635,6634,6633,6632,6631,6630,6629,6628,6627,6626,6625,6624,6623,6622,6621,6620,6619"
	                		+ "select org.dept_name,\r\n" + 
	                		"               fn_find_name_by_empuids(c.create_user) CREATE_USER_NAME,\r\n" + 
	                		"               c.*,\r\n" + 
	                		"               c.id charge_id,\r\n" + 
	                		"               c.status charge_status,\r\n" + 
	                		"               nvl(t.COUNT_PENDING, 0) COUNT_PENDING,\r\n" + 
	                		"               nvl(css.count, 0) all_count,\r\n" + 
	                		"               css.count count_charge,\r\n" + 
	                		"               css.amo_receive,\r\n" + 
	                		"               css.dis_amount,\r\n" + 
	                		"               css.count_order_invalid,\r\n" + 
	                		"               (css.amo_receive - css.dis_amount) after_dis_amount\r\n" + 
	                		"          from pbs_s_charge_multi c\r\n" + 
	                		"          left join (select t.charge_id,\r\n" + 
	                		"                           count(1) count,\r\n" + 
	                		"                           sum(decode(t.finish,1,0,1)) count_order_invalid, --还未生效的总数\r\n" + 
	                		"                           sum(t.amo_receive) amo_receive,\r\n" + 
	                		"                           sum(t.dis_amount) dis_amount\r\n" + 
	                		"                      from view_charge_result t\r\n" + 
	                		"                     group by t.CHARGE_ID) css\r\n" + 
	                		"            on c.id = css.charge_id\r\n" + 
	                		"          left join (select cs.SCHOOL_CODE,\r\n" + 
	                		"                           cs.TERM_CODE,\r\n" + 
	                		"                           cs.DEPT_CODE,\r\n" + 
	                		"                           cs.EDU_STATE,\r\n" + 
	                		"                           count(1) COUNT_PENDING\r\n" + 
	                		"                      from view_multi_charge_student cs\r\n" + 
	                		"                     group by cs.SCHOOL_CODE,\r\n" + 
	                		"                              cs.TERM_CODE,\r\n" + 
	                		"                              cs.DEPT_CODE,\r\n" + 
	                		"                              cs.EDU_STATE) t\r\n" + 
	                		"            on t.school_code = c.school_code\r\n" + 
	                		"           and t.term_code = c.term_code\r\n" + 
	                		"           and t.dept_code = c.dept_code\r\n" + 
	                		"           and t.edu_state = c.edu_state\r\n" + 
	                		"          left join (select distinct org1.term_code,\r\n" + 
	                		"                                    org1.school_code,\r\n" + 
	                		"                                    org1.dept_code,\r\n" + 
	                		"                                    org1.dept_name,\r\n" + 
	                		"                                    org1.edu_state\r\n" + 
	                		"                      from view_school_year_org org1) org\r\n" + 
	                		"            on org.school_code = c.school_code\r\n" + 
	                		"           and org.term_code = c.term_code\r\n" + 
	                		"           and org.dept_code = c.dept_code\r\n" + 
	                		"           and org.edu_state = c.edu_state\r\n" + 
	                		"         where 1 = 1"
	                		+ "" + r2;
	            });


	    System.out.println("main======" + Thread.currentThread().getName());
	    System.out.println(result.get());
	    stopWatch.stop();
	    // 整体请求时间以最长的来定
	    System.out.println("senconds:" + stopWatch.getTime());
	}

}
